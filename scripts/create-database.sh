#!/bin/bash

# Script de cr√©ation de base de donn√©es pour les projets Next.js
# Usage: ./scripts/create-database.sh [PROJECT_NAME] [ENV] [NUC_HOST]
#
# PROJECT_NAME: nom du projet (ex: mon-app)
# ENV: dev|staging|stable (d√©faut: dev)
# NUC_HOST: adresse IP du NUC (d√©faut depuis variable d'environnement)

set -e  # Exit on error

# Configuration
PROJECT_NAME=${1:-$(basename $(pwd))}
ENV=${2:-"dev"}

# Charger la configuration NUC si disponible
if [ -f ".env.nuc" ]; then
    echo "üìã Chargement de la configuration .env.nuc..."
    source .env.nuc
    # Exporter PGPASSWORD si d√©fini pour l'authentification PostgreSQL
    if [ -n "$PGPASSWORD" ]; then
        export PGPASSWORD
    fi
else
    echo "‚ö†Ô∏è  Fichier .env.nuc non trouv√©. Cr√©ez-le avec:"
    echo "   cp .env.nuc.example .env.nuc"
    echo "   puis configurez NUC_HOST avec l'IP de votre serveur"
    exit 1
fi

NUC_HOST=${3:-${NUC_HOST:-"localhost"}}
NUC_USER=${NUC_USER:-"postgres"}
NUC_PORT=${NUC_PORT:-"5432"}

# Validation de l'environnement
if [[ ! "$ENV" =~ ^(dev|staging|stable)$ ]]; then
    echo "‚ùå Environnement invalide: $ENV"
    echo "Environnements support√©s: dev, staging, stable"
    exit 1
fi

# Construction du nom de la base de donn√©es
DB_NAME="${PROJECT_NAME}-${ENV}"
DB_USER="user_${PROJECT_NAME//-/_}_${ENV}"
DB_PASSWORD=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-25)

echo "üóÉÔ∏è  Configuration de la base de donn√©es"
echo "üìç Serveur: $NUC_HOST:$NUC_PORT"
echo "üóÇÔ∏è  Base: $DB_NAME"
echo "üë§ Utilisateur: $DB_USER"
echo "üîë Mot de passe: [g√©n√©r√© automatiquement]"
echo ""

# Ajouter libpq au PATH si disponible
if [ -d "/opt/homebrew/opt/libpq/bin" ]; then
    export PATH="/opt/homebrew/opt/libpq/bin:$PATH"
elif [ -d "/usr/local/opt/libpq/bin" ]; then
    export PATH="/usr/local/opt/libpq/bin:$PATH"
fi

# V√©rifier que psql est disponible
if ! command -v psql &> /dev/null; then
    echo "‚ùå Le client PostgreSQL (psql) n'est pas install√© sur cette machine"
    echo ""
    echo "üõ†Ô∏è  Solutions possibles :"
    echo "1. Installer uniquement le client PostgreSQL (recommand√©) :"
    echo "   brew install libpq"
    echo "   echo 'export PATH=\"/opt/homebrew/opt/libpq/bin:\$PATH\"' >> ~/.zshrc"
    echo "   source ~/.zshrc"
    echo ""
    echo "2. Utiliser Docker temporairement :"
    echo "   docker run --rm -it postgres:15 psql \"postgresql://$NUC_USER@$NUC_HOST:$NUC_PORT/postgres\" -c \"SELECT 1;\""
    echo ""
    echo "3. Installer PostgreSQL complet (non recommand√©) :"
    echo "   brew install postgresql"
    echo ""
    echo "Relancez ce script apr√®s installation du client PostgreSQL."
    exit 1
fi

# Test de connexion
echo "üîç Test de connexion au serveur PostgreSQL..."
if ! psql "postgresql://$NUC_USER@$NUC_HOST:$NUC_PORT/postgres" -c "SELECT 1;" >/dev/null 2>&1; then
    echo "‚ùå Impossible de se connecter au serveur PostgreSQL"
    echo "V√©rifiez:"
    echo "  - Le serveur PostgreSQL est d√©marr√© sur $NUC_HOST ($NUC_HOST:$NUC_PORT)"
    echo "  - Vous avez acc√®s depuis cette machine"
    echo "  - L'authentification est configur√©e (PGPASSWORD dans .env.nuc si n√©cessaire)"
    echo ""
    echo "üîß Test manuel :"
    echo "   psql \"postgresql://$NUC_USER@$NUC_HOST:$NUC_PORT/postgres\" -c \"SELECT 1;\""
    exit 1
fi

echo "‚úÖ Connexion au serveur PostgreSQL r√©ussie"

# Cr√©ation de la base de donn√©es et de l'utilisateur
echo "üèóÔ∏è  Cr√©ation de la base de donn√©es et de l'utilisateur..."

psql "postgresql://$NUC_USER@$NUC_HOST:$NUC_PORT/postgres" <<EOF
-- Supprimer l'utilisateur s'il existe d√©j√† (pour recr√©ation)
DROP USER IF EXISTS "$DB_USER";

-- Supprimer la base de donn√©es si elle existe d√©j√† (pour recr√©ation)
DROP DATABASE IF EXISTS "$DB_NAME";

-- Cr√©er l'utilisateur avec mot de passe
CREATE USER "$DB_USER" WITH PASSWORD '$DB_PASSWORD';

-- Cr√©er la base de donn√©es avec l'utilisateur comme propri√©taire
CREATE DATABASE "$DB_NAME" OWNER "$DB_USER";

-- Se connecter √† la nouvelle base pour configurer les permissions
\c "$DB_NAME"

-- Donner tous les privil√®ges sur la base de donn√©es
GRANT ALL PRIVILEGES ON DATABASE "$DB_NAME" TO "$DB_USER";

-- Donner tous les privil√®ges sur le sch√©ma public
GRANT ALL ON SCHEMA public TO "$DB_USER";
GRANT CREATE ON SCHEMA public TO "$DB_USER";

-- Donner les privil√®ges pour cr√©er des tables et des s√©quences
GRANT ALL ON ALL TABLES IN SCHEMA public TO "$DB_USER";
GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO "$DB_USER";

-- Privil√®ges par d√©faut pour les futurs objets
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO "$DB_USER";
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO "$DB_USER";

-- Permissions sp√©ciales pour Prisma (shadow database)
GRANT CREATE ON DATABASE "$DB_NAME" TO "$DB_USER";

-- Afficher les informations
SELECT 'Base de donn√©es cr√©√©e avec succ√®s' AS status;
\q
EOF

# Construction de l'URL de connexion
DATABASE_URL="postgresql://$DB_USER:$DB_PASSWORD@$NUC_HOST:$NUC_PORT/$DB_NAME"

echo ""
echo "‚úÖ Base de donn√©es cr√©√©e avec succ√®s !"
echo ""
echo "üìã Informations de connexion :"
echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
echo "‚îÇ Base de donn√©es : $DB_NAME"
echo "‚îÇ Utilisateur     : $DB_USER"
echo "‚îÇ Serveur         : $NUC_HOST:$NUC_PORT"
echo "‚îÇ"
echo "‚îÇ üìÑ URL de connexion (√† copier dans .env.$ENV) :"
echo "‚îÇ DATABASE_URL=\"$DATABASE_URL\""
echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
echo ""

# √âcrire dans un fichier pour usage automatique
ENV_FILE=".env.${ENV}"
if [ "$ENV" = "dev" ]; then
    ENV_FILE=".env.local"
fi

echo "üíæ √âcriture dans $ENV_FILE..."

# Cr√©er le fichier d'environnement s'il n'existe pas
if [ ! -f "$ENV_FILE" ]; then
    cp .env.example "$ENV_FILE"
    echo "üìÑ Fichier $ENV_FILE cr√©√© depuis .env.example"
fi

# Mettre √† jour ou ajouter DATABASE_URL
if grep -q "^DATABASE_URL=" "$ENV_FILE" 2>/dev/null; then
    # Remplacer la ligne existante (compatible macOS et Linux)
    sed -i.bak "s|^DATABASE_URL=.*|DATABASE_URL=\"$DATABASE_URL\"|" "$ENV_FILE"
    rm -f "$ENV_FILE.bak"
    echo "üìù DATABASE_URL mise √† jour dans $ENV_FILE"
else
    # Ajouter la ligne
    echo "" >> "$ENV_FILE"
    echo "# Base de donn√©es g√©n√©r√©e automatiquement" >> "$ENV_FILE"
    echo "DATABASE_URL=\"$DATABASE_URL\"" >> "$ENV_FILE"
    echo "üìù DATABASE_URL ajout√©e √† $ENV_FILE"
fi

echo ""
echo "üöÄ Prochaines √©tapes :"
echo "1. V√©rifiez le fichier $ENV_FILE"
echo "2. Lancez: npx prisma migrate dev --name init"
echo "3. D√©marrez votre application avec: npm run dev"
echo ""
echo "üîß Commandes utiles :"
echo "   psql \"$DATABASE_URL\" -c \"\\dt\"  # Lister les tables"
echo "   npx prisma studio                    # Interface graphique"